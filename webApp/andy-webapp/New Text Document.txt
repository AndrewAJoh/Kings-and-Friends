from player import Player
from card import Card
from table import Table
import random
from flask import request, Flask, jsonify, render_template
import json
import sys
from gamestatus import GameStatus, Serialize

def createPlayer(playerName):
    playerId = len(GameStatus.playerList)
    player = Player(playerName, playerId)
    GameStatus.playerList.append(player)
    sys.stdout.write('There are now ' + str(len(GameStatus.playerList)) + ' players in the game' + '\n')    sys.stdout.flush()
    if (len(GameStatus.playerList) == 4):
        startGame()

def startGame():
        sys.stdout.write("The game will now start\n")
        sys.stdout.flush()
        GameStatus.isGameActivated = True
        GameStatus.playerList[GameStatus.currentPlayer].isTurn = True
        distributeCards(GameStatus.playerList, GameStatus.table.Deck)
        drawCard(GameStatus.currentPlayer)
        sys.stdout.write("It is %s's turn" % GameStatus.playerList[GameStatus.currentPlayer].name + '\n')
        sys.stdout.flush()


def distributeCards(playerArray, deck):
    # Distributes 7 cards to each player
    for player in playerArray:
        i = 0
        while i < 7:
            thisCard = deck.pop()
            thisCard.position = i
            player.hand.append(thisCard)
            i += 1

def updateCardPositions(playerId):
    for i in range(len(GameStatus.playerList[playerId].hand)):
        if (GameStatus.playerList[playerId].hand[i].position != i):
            GameStatus.playerList[playerId].hand[i].position = i

def placeCard(player, card, pile, table):
    # Takes input card from current player through button action, places card in desired pile.
    # Card will be a card object containing value, suit, and location in player hand list
    # Must contain logic for alternating black/red as well as being 1 value lower than previous
    if pile == "NW":
        if (not table.NW):
            if (card.value != 13):
                return "You must place a King in the corner first"
            else:
                table.NW.append(card)
                updateCardPositions(player.playerId)
        elif (table.NW[-1].color != card.color):
            if (card.value == table.NW[-1].value - 1):
                table.NW.append(card)
                updateCardPositions(player.playerId)
            else:
                print("error")
        else:
            print("error")
    elif pile == "N":
        if (table.N[-1].color != card.color):
            if (card.value == table.N[-1].value - 1):
                table.N.append(card)
                updateCardPositions(player.playerId)
            else:
                print("error")
        else:
            print("error")
    elif pile == "NE":
        if (not table.NE):
            if (card.value != 13):
                return "You must place a King in the corner first"
            else:
                table.NE.append(card)
                updateCardPositions(player.playerId)
        elif (table.NE[-1].color != card.color):
            if (card.value == table.NE[-1].value - 1):
                table.NE.append(card)
                updateCardPositions(player.playerId)
            else:
                print("error")
        else:
            print("error")
    elif pile == "W":
        if (table.W[-1].color != card.color):
	